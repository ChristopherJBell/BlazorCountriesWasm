@page "/countrylist"
@inject ICountryService CountryService;
@inject NavigationManager NavigationManager

@using Syncfusion.Blazor.Popups
@inject SfDialogService DialogService

<PageTitle>Countries List</PageTitle>

<h3>Countries List</h3>

<hr />

<div class="col-sm-8" style="height: calc(100vh - 10rem);">
    <SfGrid DataSource="@countries"
            AllowSorting="true"
            Height="100%"
            Toolbar="Toolbaritems">
        <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="Country" RowSelected="RowSelectHandler"></GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(Country.CountryName)"
                        HeaderText="Country Name"
                        TextAlign="@TextAlign.Left"
                        Width="100">
            </GridColumn>
        </GridColumns>
    </SfGrid>
 </div>

@code {
    private List<ItemModel> Toolbaritems = new List<ItemModel>();  //provides the list to populate the toolbar items
    private List<Country>? countries;
    private List<Country>? countriesUnordered;
    private int CountryID = 0;
    private string CountryName = string.Empty;


    protected override async Task OnInitializedAsync()
    {
        //Add options for the custom toolbar
        Toolbaritems.Add(new ItemModel() { Text = "Add", TooltipText = "Add a new country", PrefixIcon = "e-add" });
        Toolbaritems.Add(new ItemModel() { Text = "Edit", TooltipText = "Edit selected country", PrefixIcon = "e-edit" });
        Toolbaritems.Add(new ItemModel() { Text = "Delete", TooltipText = "Delete selected country", PrefixIcon = "e-delete" });

        await RefreshCountriesGrid();
    }

    public async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Add")
        {
            //Code for adding goes here
            CountryID = 0;
            NavigationManager.NavigateTo($"/countriesaddedit/{CountryID}");
        }

        if (args.Item.Text == "Edit")
        {
            //Check that the user has selected a row
            if (CountryID == 0)
            {
                await DialogService.AlertAsync("Please select a country.", "No Country Selected");
            }
            else
            {
                NavigationManager.NavigateTo($"/countriesaddedit/{CountryID}");
                CountryID = 0;
            }
        }

        if (args.Item.Text == "Delete")
        {
            //Check that the user has selected a row
            if (CountryID == 0)
            {
                await DialogService.AlertAsync("Please select a country.", "No Country Selected");
            }
            else
            {
                //code for deleting
                string dialogMessage = $"Are you sure you want to delete {CountryName}?";
                bool isConfirm = await DialogService.ConfirmAsync(dialogMessage, "Delete Country");
                if (isConfirm)
                {
                    await CountryService.CountryDelete(CountryID);
                    await RefreshCountriesGrid();
                    CountryID = 0;
                }
            }
        }
    }

    public void RowSelectHandler(RowSelectEventArgs<Country> args)
    {
        //{args.Data} returns the current selected records.
        CountryID = args.Data.CountryId;
        CountryName = args.Data.CountryName;
    }

    public async Task RefreshCountriesGrid()
    {
        await CountryService.GetCountries();
        countriesUnordered = new();
        foreach (var country in CountryService.Countries)
            countriesUnordered.Add(country);

        countries = countriesUnordered.OrderBy(c => c.CountryName).ToList();
    }
}